firstElem a = 
	let rec f i = function
		|[] -> 1
		|(x::sx) when x = a -> i
		|(x::xs) -> f (i+1) xs

let reverseAll list =  // [[1,2,3],[4,5],[6]] -> [[6],[5,4],[3,2,1]] уровень вложенности 2
	list |> List.map List.rev |> List.rev

let reverse list = 
	let rec revA acc = function
		|[]->acc
		|(x::xs)->revA(x::acc) xs
	revA []




let freq list     // [1,2,1,3,3,2,1,5] -> [(1,3);(2,2);(3,2);(5,1)]


let freq list::AtomFreq

let freq list = 
let add a = function
	|[]->(a,1)
	|((x,c)::xs) then x=a ->(x,c+1)::xs
	|(x::xs)->x::add a xs

List.fold (fun acc x->add x acc) [] list // с использованием сверток
List.fold(flip add) [] list

let flip f a b = f b a

('a->'b->'a)->'a->'b.list->'a


let balance list =
	"(let x in (a=b=x))(\1x)
	":("
	"())("


let balance list = 
	let rec b i = function
		| [] -> i =0
		| (x::xs) -> match x with
			'(' -> b (i+1) sx
			')' when i = 0 -> false
			')' -> b (i-1) xs
			_ -> b i xs
		b 0 list




SICP

amount (cov:int) (list:int list) =               //112рублей [1,2,5,10] рублей, вернуть кол-во разменов - число


let amount (cov:int) (list:int list) : int = 
	let rec amount' cov list = 
		if cov = 0 then 1
		else if cov < 0 or list = [] then 0
		else amount cov (List.tail list) + amount (cov - List.head list) list
	


amount' cov List.rev (List.sort sorted) // сортировка нужна для того чтобы избавиться от повторяющихся значений 5,1,5 1,5,5

Корирование
Каждая функция представляется int->(int->int)

Когда мы пишем 
let sum = (+)
let sum ab = (+)ab

(+) (9 5) ((+)9)5 - вторая запись верна


let sumWith 9 = (+)9


Функция высшего порядка - функция может принимать другие функции, как свои аргументы, также может возвращать другие функции

let doHAgain f x = f (f x)
doHAgain sumWith9 3

List.map2 (+) [1;2;3;4] [4;3;2;1]
	'a->'b->'c 'a.list 'b.list

let rec map f = function
	|[]->[]
	|(x::xs)->f x::map f xs

let rec mapR
list map ((+)4) [1;5]
map ((+)"|") ["BING";"BANG"]



Композиция функций
	[[1;2;3];[4;5];[];[2;8];[];[]]

list filter (List.isEmpty >> not)
	(fun x -> not List.isEmpty x)


type Point = (float * float)
let add instance (x,y):Point (a,b):Point : float = 
	let (w,h) = (x-a,b-y)
	sqrt (w*w + h*h)
let points: Point list = [(1.,1.);(2.,4.);(6.,8.)]
let nearest 3 (dest:Point)

let nearest 3 (dest:Point)=
	Seq.take 3 (List.sort(listmap(fun x -> (calcDistance x dest, x))points))

let nearest 3 (dest:Point)=points
	|> List.map (fun x -> (calcDistance x dest, x))
	|> List.filter (fux (d,x -> d <2))
	|> List.sort
	|>Seq.take 3


type Set = int -> bool
contains set->int->bool
singleton int -> Set
union Set->Set->Set
intersect Set->Set->Set
diff SEt->Set->Set
filter Set->(int->bool)->Set
forAll Set->(int->bool)->bool верна ли эта функция для каждого элемента множества
exist Set->(int->bool)->bool

данные будем замыкать внутри своей функции

let contains (S:Set) (a:int) = s a
let singleton : int -> Set = fun b -> (fun a = a = b)
let s5 = singletonSet 5
contains s5 5 - true
			6 - false

let singletonSet (a:int) = fun b -> a = b
let singletonSet (a:int) = 
	let answer b = a = b
	answer

let union (a:Set) (b:Set) = fun c -> 
	contains a c or contains b c
let a15 = [1..5] |> List.map singletonSet |> List.reduce union
a15 4 a15 6








